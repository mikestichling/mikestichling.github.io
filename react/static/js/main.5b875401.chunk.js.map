{"version":3,"sources":["services/Api.js","components/grid/tile/index.js","components/grid/index.js","components/carousel/search/index.js","components/carousel/index.js","components/featured/index.js","App.js","serviceWorker.js","index.js"],"names":["Api","fetch","API_BASE_ADDRESS","method","Tile","src","title","location","className","alt","Grid","data","map","item","img","Search","inputChangedHandler","type","name","placeholder","autoComplete","onChange","filterData","filter","toLowerCase","includes","trim","sliceData","index","slice","Carousel","useState","setData","setIndex","filterString","setFilterString","useEffect","a","getCarousel","response","json","e","target","value","updateFilterString","onClick","newIndex","length","Featured","getFeatured","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b875401.chunk.js","sourcesContent":["const API_BASE_ADDRESS = 'http://demo3136867.mockable.io/';\n\nexport default class Api {\n    static getCarousel() {\n        const url = API_BASE_ADDRESS + '/carousel';\n\n        return fetch(url, {\n            method: 'GET'\n        });\n    }\n\n    static getFeatured() {\n        const url = API_BASE_ADDRESS + \"/featured\";\n\n        return fetch(url, {\n            method: 'GET'\n        });\n    }\n}","import React from 'react';\nimport './style.css'\n\nconst Tile = ({ src, title, location }) => {\n  return (\n    <div className='tile'>\n        <img src={src} alt={title} />\n        <div className='tile-text'>\n          <p>{title}</p>\n          <p>\n            <span className='location'></span>{location}\n          </p>\n        </div>\n    </div>\n  );\n}\n\n\nexport default Tile;","import React from 'react';\nimport Tile from './tile';\nimport './style.css'\n\nconst Grid = ({data, title}) => {\n    return (\n        <div className=\"grid-container\">\n            <span className='title'>\n                {title}\n            </span>\n            <div className='grid'>\n                {data.map(item =>\n                    <Tile src={item.img} title={item.title} location={item.location}/>\n            )}  \n            </div>\n        </div>\n    );\n}\n\n\nexport default Grid;","import React from 'react';\nimport './style.css';\n\nconst Search = ({inputChangedHandler}) => {\n    return (\n        <input\n            type='text'\n            name='search'\n            placeholder='Search for...'\n            autoComplete='off'\n            onChange={inputChangedHandler}\n        />\n    );\n}\n\n\nexport default Search;","import React, { useState, useEffect} from 'react';\nimport Api from '../../services/Api';\nimport Grid from '../grid';\nimport Search from './search';\n\nimport './style.css';\n\n\nconst PAGE_SIZE = 4;\n\nconst filterData = (data, filter) => {\n    return data.filter(function(item){\n        return filter == null || filter === '' || item.title.toLowerCase().includes(filter.trim().toLowerCase())\n    });\n}\n\nconst sliceData = (data, index) => {\n    return data.slice(index, index + PAGE_SIZE);\n}\n\nconst Carousel = () => {\n    const [data, setData] = useState([]);\n    const [index, setIndex] = useState(0);\n    const [filterString, setFilterString] = useState(null);\n\n    const left = () => {\n        var newIndex = index - 1;\n        if (newIndex >= 0 && newIndex <= filterData(data, filterString).length)\n        {\n            setIndex(newIndex);\n        }\n        else\n        {\n            setIndex(0);\n        }\n    }\n    \n    const right = () => {\n        var newIndex = index + 1;\n        if (newIndex >= 0 && newIndex + PAGE_SIZE <= filterData(data, filterString).length)\n        {\n            setIndex(newIndex);\n        }\n        else\n        {\n            setIndex(filterData(data, filterString).length - PAGE_SIZE);\n        }\n    }\n\n    const updateFilterString = (e) => {\n        setIndex(0);\n        setFilterString(e.target.value);\n    }\n\n    useEffect(async () => {      \n        const response = await Api.getCarousel();\n        const json = await response.json();\n        setData(json.data);\n    }, []);  \n    \n    return (\n        <div className='carousel'>\n            <Search inputChangedHandler={(e) => updateFilterString(e)}></Search>\n            <Grid data={sliceData(filterData(data, filterString), index)} title='Popular Around you'/>\n            <div className='carousel-button-container'>\n                <div className='left carousel-button' onClick={left}></div>\n            </div>\n            \n            <div className='carousel-button-container pull-right'>\n                <div className='right carousel-button' onClick={right}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default Carousel;","import React, { useState, useEffect} from 'react';\nimport Api from '../../services/Api';\nimport Grid from '../grid';\n\nconst Featured = () => {\n    const [data, setData] = useState([]);\n\n    useEffect(async () => {      \n        const response = await Api.getFeatured();  \n        const json = await response.json();\n        setData(json.data);\n    }, []);  \n\n    return (\n        <Grid data={data} title='Featured'/>\n    );\n}\n\n\nexport default Featured;","import React, { useState } from 'react';\nimport Carousel from './components/carousel'\nimport Featured from './components/featured';\n\nimport './App.css';\n\nfunction App() {  \n  \n  return (\n    <div>\n      <Carousel></Carousel>\n      <Featured></Featured>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}